HI SPEED CAN 
3.5V == CAN HI (2V, log 0, Dominant)
2.5V == CAN HI / CAN LOW (0V, log 1, Recessive)
1.5V == CAN LOW (2V, log 0, Dominant)

LOW SPEED CAN
0V == CAN HI (5V, log1, Recessive)
5V == CAN LOW (5V, log1, Recessive)

3.6V == CAN HI (2.2V, log0, Dominant)
1.4V == CAN LOW (2.2V, log0, Dominant)
Low speed CAN (также известный как CAN 2.0A) обеспечивает более низкую скорость передачи данных (до 125 кбит/с)
===================================================
Hi speed CAN также имеет более высокую помехозащищенность, что делает его надежным для использования в шумных средах
===================================================
Hi speed CAN (также известный как CAN 2.0B) обеспечивает более высокую скорость передачи данных (до 1 Мбит/с)
===================================================
VSS (Visual SourceSafe): 
copy


#VSS=6 
User=John Smith 
Database=C:\VSS\MyProject\ 
Project=MyProject 
File=MyFile.txt 
Version=1.0 
Action=Check in

(Visual SourceSafe, VSS) — программный продукт компании Майкрософт, файл-серверная система управления версиями,
предназначенная для небольших команд разработчиков. VSS позволяет хранить в общем хранилище файлы, 
разделяемые несколькими пользователями, для каждого файла хранится история версий.
===========================================================
Yaml
copy


person: 
  - name: John 
    id: 1 
    email: john@example.com 
  - name: Jane 
    id: 2 
    email: jane@example.com

YAML (рекурсивный акроним англ. «YAML Ain't Markup Language» — «YAML — не язык разметки») — дружественный формат сериализации данных,
 концептуально близкий к языкам разметки, но ориентированный на удобство ввода-вывода типичных структур данных многих языков программирования.
============================================================
Protobuf
copy


syntax = "proto3"; 
message Person { 
  string name = 1; 
  int32 id = 2; 
  string email = 3; 
}

Protobuf (Protocol Buffers) — это протокол сериализации данных, разработанный компанией Google. 
Он используется для эффективного и быстрого обмена структурированными данными между разными компьютерными системами, 
языками программирования и платформами. 
Протокол предоставляет способ описания данных на специальном языке (Protocol Buffer Language) и 
далее генерирует код на различных языках программирования, который позволяет сериализовывать и десериализовывать данные в формат Protobuf
=============================================================
BUSS LOAD CALCULATION

There can (only) be an estimative calculation based on some assumptions.
//Ориентировочный расчет, основанный на предположениях. 
 
Regarding CAN bus load calculation, assuming standard identifier, CAN frame consist of below field. 
//В зависимости от нагрузки на CAN-шину, предполагаем стандартный идентификатор,  CAN-кадр состоит из следующих полей:
 
1 bit start bit  == старт бит
11 bit identifier == бит идентификатор
1 bit RTR == запрос на удаленную передачу
6 bit control field == контрольное поле бит 
0 to 64 bit data field == инфо поле бит
15 bit CRC = проверочная сумма поле

Bit stuffing is possible in the above, for every sequence of 5 consecutive bits of same level. Somewhere around 18 bits in the worst case. 
3 bit delimiter, ack etc. 
7 bit end of frame 
3 bit intermission field after frame 
So 1 CAN frame contains approximately 125 bit. 
//
Установочный бит возможен выше, для каждой последовательности из 5 последовательных битов одного уровня. Около 18 битов в худшем случае.
3-бит разделитель, восприятия и т. д.
7-бит конец кадра
3-бит поле прерывания после кадра
Т.е. 1 CAN кадр содержит приблизительно 125 бит. 

Given we are using 500 kBit/s bit rate: 
//Учитывая, что мы используем скорость передачи данных 500 кбит/с:
 
bit time = 1 / bit rate = 1 / (500 * 1000) s = 2 * 10-6 s = 2 µs 
//время передачи бита = 1 / скорость передачи бит = 1 / (500 * 1000) с = 2 * 10-6 с = 2 мкс
 
This means 1 bit will take 2 µs to transfer on bus when using 500 kBit/s. 
//Т.е. передача 1 бита по шине займет 2 мкс при использовании скорости 500 кбит/с. 

So the approximate time to transfer 1 frame is  (2 µs/bit * 125 bit) = 250 µs. 
//Таким образом, приблизительное время передачи 1 кадра составляет (2 мкс/бит * 125 бит) = 250 мкс.
 
The bus load for 1 message every 100 ms with 500 kBit/s can be calculated as below: 
//Нагрузку шины для 1 сообщения каждые 100 мс со скоростью 500 кбит/с можно рассчитать следующим образом:
 
Given that every 100 ms one (1) message will be sent 
//Учитывая, что каждые 100 мс будет отправляться одно (1) сообщение
 
In 100 ms the bus will be occupied for 250 µs. 
//Через 100 мс шина будет занята на 250 мкс. 

So the bus load from these cyclic messages is 
250 µs / 100 ms = (250 / (100*1000)) * 100 % = 25000 / 100000 % = 0.25 % 
//Таким образом, загрузка шины от этих циклических сообщений составляет 250 мкс / 100 мс = (250 / (100*1000)) * 100 % = 25000 / 100000 % = 0,25 %
 
Let assume you have below multiple sending intervals on the bus as: 
//Допустим у вас есть несколько интервалов отправки на шине: 

1 frame every 10 ms     =  100 frames every 1000 ms 
1 frame every 100 ms    =   10 frames every 1000 ms 
1 frame every 1000 ms   =    1 frame   every 1000 ms 
//
1 кадр каждые 10 мс = 100 кадров каждые 1000 мс
1 кадр каждые 100 мс = 10 кадров каждые 1000 мс
1 кадр каждые 1000 мс = 1 кадр каждые 1000 мс 

This is in total                    111 frames every 1000 ms 
//Всего 111 кадров каждые 1000 мс.
 
Total time on bus is          111 * 250 µs 
//Общее время на шине 111 * 250 мкс.
 
Total time is                      1000 ms = 1000 * 1000 µs 
//Общее время 1000 мс = 1000 * 1000 мкс
 
Bus load is                         ((111 * 250) / (1000 * 1000)) * 100 % = 2.775 %
Загрузка шины составляет ((111 * 250) / (1000 * 1000)) * 100 % = 2,775 %
=================================================================================================
Another example:
Таким образом, общая нагрузка на шину CAN составляет 10 Мбит/с. Учитывая, что скорость передачи данных на шине CAN обычно ограничена до 1 Мбит/с 
или 2 Мбит/с, в данном случае у нас ее достаточно для поддержки всех устройств.
==================================================================================================
CAN (Controller Area Network) - это стандартный протокол, который используется для связи между микроконтроллерами в автомобильной отрасли. Он обеспечивает надежную и эффективную передачу данных между различными устройствами в автомобиле, такими как двигатель, трансмиссия, ABS, аудиосистема и т.д. CAN обеспечивает высокую скорость передачи данных (обычно до 1 Мбит/с) и надежность связи.
==================================================================================================
HI SPEED CAN 
3.5V == CAN HI (2V, log 0, Dominant)
2.5V == CAN HI / CAN LOW (0V, log 1, Recessive)
1.5V == CAN LOW (2V, log 0, Dominant)

LOW SPEED CAN
0V == CAN HI (5V, log1, Recessive)
5V == CAN LOW (5V, log1, Recessive)

3.6V == CAN HI (2.2V, log0, Dominant)
1.4V == CAN LOW (2.2V, log0, Dominant)
==================================================================================================
Т.е. при HI SPEED CAN (DOMINANT state, Log 0)
допустим будет большая пoмеха error=1V

Тогда при CAN HI =3.5V значение станет 2.5V

А при CAN LOW =1.5V значение станет 0.5V

Разница напряжений до помехи 3.5V - 1.5V = 2V, 
а после помехи в 1V 
2.5V - 0.5V = 2V 

А если в другую сторону помеха по знаку, то будет

Так же. Т.е. помеха будет Разница напряжений до помехи 3.5V - 1.5V = 2V, 
а после помехи в 1V 
4.5V - 2.5V = 2V
====================================================
Т.е. при LOW SPEED CAN (RECESSIVE state, Log 1) 
допустим будет большая пoмеха error=1V 
 
Тогда при CAN HI =2.5V значение станет 1.5V 
 
А при CAN LOW =2.5V значение станет 1.5V 
 
Разница напряжений до помехи 2.5V - 2.5V = 0V,  
а после помехи в 1V  
1.5V - 1.5V = 0V  
 
А если в другую сторону помеха по знаку, то будет 
 
Так же. Т.е. помеха будет Разница напряжений до помехи 2.5V - 2.5V = 0V,  
а после помехи в 1V  
3.5V - 3.5V = 0V
==================================================================================================
Теперь при LOW SPEED CAN (RECESSIVE state, log1) 
допустим будет большая пoмеха error=1V

Тогда при CAN HI =0V значение станет -1V

А при CAN LOW =5V значение станет 4V

Разница напряжений до помехи 5V - 0V = 5V, 
а после помехи в 1V 
4V - (-1V) = 5V 

А если в другую сторону помеха по знаку, то будет

Так же. Т.е. помеха будет Разница напряжений до помехи 5V - 0V = 5V, 
а после помехи в 1V 
6V - 1V = 5V
========================
Теперь при LOW SPEED CAN (DOMINANT state, log0)
допустим будет большая пoмеха error=1V 
 
Тогда при CAN HI =3.6V значение станет 2.6V 
 
А при CAN LOW =1.4V значение станет 0.4V 
 
Разница напряжений до помехи 3.6V - 1.4V = 2.2V,  
а после помехи в 1V  
2.6 - 0.4V) = 2.2V  
 
А если в другую сторону помеха по знаку, то будет 
 
Так же. Т.е. помеха будет Разница напряжений до помехи 3.6V - 1.4V = 2.2V,  
а после помехи в 1V  
4.6V - 2.4V = 2.2V
Low speed can standard for noise impact Approved either

==================================================================================================
CAN High == RED
Safety System == Система безопасности[
ABS (antiskid brake system)==антипробуксовочная тормозная система, 
SRS (supplemental restraint system)==вспомогательна удерживающая система,
EBA (emergency break assist)==система экстренного торможения]
engine controltransmission control
oil supply control
]

Powertrain == Силовой агрегат[
Engine Control == система запукска двигателя, 
Transmission Control == система управления трансмиссией/коробкой передач, 
Oil SUPPLY CONTROL == система управления подачей масла
]

==================================================================================================
Ususal Ethernet
>> Ethernet, speed: 10Mbit/s == 1.25Mbyte/s 
>> Fast Ethernet, speed: 100Mbit/s  == 12.5Mbyte/s
>> Gigabit Ethernet, speed: 1Gbit/s  == 125Mbyte/s
>> 5G Ethernet, speed: 2.5Gbit/s or 5Gbit/s == 312.5Mbyte/s or 625Mbyte/s
>> 10G Ethernet, speed: 10Gbit/s == 1.25Gbyte/s
>> 100G Ethernet, speed: 40Gbit/s or 100Gbit/s == 5Gbyte/s or 12.5Gbyte/s
==================================================================================================
Архитектура электронных компонентов автомобиля обычно включает в себя несколько основных систем, 
которые работают взаимодействую друг с другом для обеспечения безопасности, управления и комфорта во время движения.

1. Электронный блок управления (ECU) - это центральный мозг автомобиля, который контролирует функции двигателя, 
системы безопасности, трансмиссию, тормоза и другие важные компоненты. Есть разные ECU, каждый отвечающий за конкретную систему.
NOTE: Electronic Control Unit

2. Датчики - они собирают информацию о различных параметрах автомобиля, таких как скорость, температура, 
давление и т. д., и передают ее на ECU для обработки. 
Некоторые из наиболее распространенных датчиков включают датчики скорости, датчики температуры двигателя и датчики давления масла.

3. Актуаторы - это устройства, которые управляют различными системами автомобиля на основе сигналов от ECU. 
Некоторые из актуаторов включают исполнительные механизмы двигателя, электростеклоподъемники, системы ABS и другие.

4. Сеть CAN (Controller Area Network) - это сеть, которая соединяет все электронные компоненты автомобиля между собой, 
обеспечивая передачу данных и коммуникацию между ними.
NOTE: не смотря на новый протокол Automotive Ethernet, CAN отработал уже несколько десятков лет, 
развивался и являлся достаточным по всем техническим параметрам

5. Бортовой компьютер - это устройство, которое отображает информацию о состоянии автомобиля, 
такую как скорость, расход топлива, проблемы двигателя и другие. 
Он также обеспечивает возможность управления некоторыми функциями автомобиля, такими как звуковая система и кондиционер.

Architecture Summary:
Эти компоненты работают вместе для обеспечения безопасной и эффективной работы автомобиля и обеспечивают важные функции, 
такие как управление двигателем, трансмиссией, тормозами, электрическими системами и комфортом пассажиров.
====================================================================================================
CAN High == RED
Safety System == Система безопасности[
ABS (antiskid brake system)==антипробуксовочная тормозная система, 
SRS (supplemental restraint system)==вспомогательна удерживающая система,
EBA (emergency break assist)==система экстренного торможения]
engine controltransmission control
oil supply control
]

Powertrain == Силовой агрегат[
Engine Control == система запукска двигателя, 
Transmission Control == система управления трансмиссией/коробкой передач, 
Oil SUPPLY CONTROL == система управления подачей масла
]
====================================================================================================
CAN Low == BLUE 
Telematics[
Radio == Радио
GPS(Global Position System) == ГПС
Infotainment == Информационнно-развлекательная система]

Body control[
Door control == Контроль дверей
Light control == Контроль света
Climate control == климат контроль
]

Low speed CAN (также известный как CAN 2.0A) обеспечивает более низкую скорость передачи данных (до 125 кбит/с)
в обсчем LOW speed CAN применяется в случаях менее критичных, не препятствующих основным функциям авто, т.е. движению == основная функция авто
=====================================================================================================
В целом, выбор между Hi speed CAN и Low speed CAN зависит от конкретного применения и требований к скорости передачи данных. 
Оба стандарта имеют свои преимущества и недостатки, и важно выбирать тот, который наилучшим образом соответствует конкретным потребностям системы.
=====================================================================================================

Automotive Ethernet - это специальная версия Ethernet, разработанная специально для использования в автомобильной промышленности. 
Он отличается от обычного Ethernet (который используется в обычных домашних и офисных сетях) несколькими особенностями:

A. Надежность и устойчивость к экстремальным условиям. Автомобили подвергаются различным воздействиям, таким как вибрации, 
скачки напряжения и температурные колебания. Поэтому Automotive Ethernet спроектирован таким образом, чтобы быть устойчивым к 
таким воздействиям и работать стабильно в тяжелых условиях.

B. Быстродействие. В автомобильной электронике требуется высокая скорость передачи данных для обеспечения надежной и быстрой работы 
различных систем, таких как системы безопасности, управления двигателем и информационно-развлекательные системы. Automotive Ethernet 
обеспечивает значительно более высокую скорость передачи данных по сравнению с обычным Ethernet.

C. Поддержка различных протоколов. Automotive Ethernet поддерживает различные протоколы и стандарты, которые широко используются в 
автомобильной отрасли, такие как IP, UDP, TCP и другие специализированные протоколы для автомобильных систем.

NOTE:
IP (Internet Protocol) — это основной протокол, используемый для передачи данных в интернете и других сетях. 
Он отвечает за адресацию и маршрутизацию пакетов данных, позволяя устройствам обмениваться информацией

NOTE:
UDP (User Datagram Protocol) — один из ключевых элементов набора сетевых протоколов для Интернета. 
С его помощью компьютерные приложения могут посылать сообщения другим хостам по IP-сети без необходимости 
предварительного сообщения для установки специальных каналов передачи или путей данных.
NOTE: 
TCP (Transmission Control Protocol) — протокол транспортного уровня в модели OSI, который обеспечивает надёжную передачу данных между устройствами в сети

D. Безопасность. Automotive Ethernet обеспечивает высокий уровень защиты данных, что критически важно для автомобильных систем, 
чтобы предотвратить несанкционированный доступ и кибератаки.

Summary:
Таким образом, Automotive Ethernet отличается от обычного Ethernet тем, что он спроектирован специально для 
использования в автомобильной отрасли, обладает высокой устойчивостью к экстремальным условиям, 
обеспечивает высокую скорость передачи данных, поддерживает различные протоколы и обеспечивает высокий уровень безопасности.

Automotive Ethernet:
The fundamental difference between automotive Ethernet vs. 
Ethernet in its traditional form involves the cables: 
standard Ethernet uses two twisted pairs, one for transmitting data and one for receiving. 
Automotive Ethernet, on the other hand, uses only one twisted pair that transmits and receives at the same time.

Automotive Ethernet - это новый стандартный протокол связи, который все больше используется в современных автомобилях. 
Он обеспечивает высокую скорость передачи данных (до 1 Гбит/с) и поддерживает различные приложения, 
такие как камеры заднего вида, сенсоры безопасности, системы навигации и развлечения. 
Automotive Ethernet обеспечивает более высокую производительность и гибкость в сравнении с традиционными протоколами, такими как CAN и LIN.
==================================================================================================
LIN (Local Interconnect Network) - это другой стандартный протокол, используемый в автомобильной отрасли для связи между 
различными устройствами в автомобиле. LIN обеспечивает низкую скорость передачи данных (обычно до 20 кбит/с) 
и является более простым и дешевым в реализации по сравнению с CAN. 
Он обычно используется для управления низкочастотными устройствами, такими как окна, зеркала заднего вида и т.д.
==================================================================================================
CAN FD (Controller Area Network Flexible Data-rate) - это расширение стандарта CAN, которое предлагает более высокую скорость передачи данных 
(до 5 Мбит/с) и большую гибкость в управлении данными. Это позволяет улучшить производительность и эффективность системы связи в автомобилях.
==================================================================================================
CAN (Controller Area Network) - это стандартный протокол, который используется для связи между микроконтроллерами в автомобильной отрасли. 
Он обеспечивает надежную и эффективную передачу данных между различными устройствами в автомобиле, такими как двигатель, трансмиссия, ABS, аудиосистема и т.д. 
CAN обеспечивает высокую скорость передачи данных (обычно до 1 Мбит/с) и надежность связи.
==================================================================================================

